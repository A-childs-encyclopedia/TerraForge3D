[META]
{
    "name": "PBR Material",
    "fname": "getPBRColor",
    "returns": "vec3",
    "params": ["vec3:albedoT", "vec3:normalT", "vec3:metalnessT", "vec3:aoT", "vec3:roughnessT"],
    "color" : { "r" : 24, "g" : 55, "b" : 9},
    "type": "method",
    "sharedData": {
	"Gamma Correction" : {"type":"bool", "default":true, "alias":"useGamma"},
	"HDR Tonemapping" : {"type":"bool", "default":true, "alias":"useHDRTonemapping"},
	"Distance Based Strength" : {"type":"bool", "default":true, "alias":"useDistanceBasedStrength"}
    }
}
[/META]

[CODE]

	vec3 albedo = albedoT;
	if(useGamma == 1.0f)
		albedo = pow(albedo, vec3(2.2f));
	float metalness = metalnessT.r;
	float roughness = roughnessT.r;
	float ao = aoT.r;

	// Outgoing light direction (vector from world-space fragment position to the "eye").
	vec3 Lo = normalize(_CameraPos - FragPos.xyz);
	
	// Get current fragment's normal and transform to world space.
	vec3 N = normalize(2.0f * normalT - 1.0f);
	N = normalize(TBN * N);

	// Angle between surface normal and outgoing light direction.
	float cosLo = max(0.0, dot(N, Lo));

	// Specular reflection vector.
	vec3 Lr = 2.0 * cosLo * N - Lo;

	// Fresnel reflectance at normal incidence (for metals use albedo color).
	vec3 F0 = mix(Fdielectric, albedo, metalness);

	// Direct lighting calculation for analytical lights.
	vec3 directLighting = vec3(0);
	// for(int i=0; i<NumLights; ++i)
	// {
		//vec3 Li = -lights[i].direction;
		//vec3 Lradiance = lights[i].radiance;
	
		vec3 Li = -normalize(FragPos.xyz - _LightPosition);
		vec3 Lradiance = _LightColor * _LightStrength;
		if(useDistanceBasedStrength == 1.0f)
		{
			float Ldistance = length(_LightPosition - FragPos.xyz);
			Lradiance = Lradiance / (Ldistance * Ldistance);
		}

		// Half-vector between Li and Lo.
		vec3 Lh = normalize(Li + Lo);

		// Calculate angles between surface normal and various light vectors.
		float cosLi = max(0.0, dot(N, Li));
		float cosLh = max(0.0, dot(N, Lh));

		// Calculate Fresnel term for direct lighting. 
		vec3 F  = fresnelSchlick(F0, max(0.0, dot(Lh, Lo)));
		// Calculate normal distribution for specular BRDF.
		float D = ndfGGX(cosLh, roughness);
		// Calculate geometric attenuation for specular BRDF.
		float G = gaSchlickGGX(cosLi, cosLo, roughness);

		// Diffuse scattering happens due to light being refracted multiple times by a dielectric medium.
		// Metals on the other hand either reflect or absorb energy, so diffuse contribution is always zero.
		// To be energy conserving we must scale diffuse BRDF contribution based on Fresnel factor & metalness.
		vec3 kd = mix(vec3(1.0) - F, vec3(0.0), metalness);

		// Lambert diffuse BRDF.
		// We don't scale by 1/3.141f for lighting & material units to be more convenient.
		// See: https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/
		vec3 diffuseBRDF = kd * albedo;

		// Cook-Torrance specular microfacet BRDF.
		vec3 specularBRDF = (F * D * G) / max(Epsilon, 4.0 * cosLi * cosLo);

		// Total contribution for this light.
		directLighting += (diffuseBRDF + specularBRDF) * Lradiance * cosLi;
	//}

	vec3 ambientLighting = vec3(0.0f);

	// Later to be replaced by Spceular IBL
	ambientLighting = vec3(0.03f) * albedo * ao;

	vec3 result = ambientLighting + directLighting;
	
	if(useHDRTonemapping == 1.0f)
		result = result / (result + vec3(1.0f));

	if(useGamma == 1.0f)
		result = pow(result, vec3(1.0f/2.2f));
	
	return result;

[/CODE]
